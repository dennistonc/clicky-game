{"version":3,"sources":["components/Cards/Cards.js","components/Wrapper/Wrapper.js","components/NavBar/Navbar.js","components/Footer/Footer.js","App.js","serviceWorker.js","index.js"],"names":["Cards","props","className","alt","name","src","image","id","onClick","randomizeVillagers","Wrapper","children","NavBar","classname","href","sentence","score","topScore","Footer","role","aria-label","App","state","characters","villagerID","includes","setState","push","console","log","newCharacters","sort","a","b","Math","random","this","map","character","key","Component","Boolean","window","location","hostname","match","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","error","message"],"mappings":"+pCAaeA,MAVf,SAAeC,GACb,OACE,yBAAKC,UAAU,QACb,yBAAKA,UAAU,iBACb,yBAAKC,IAAKF,EAAMG,KAAMC,IAAKJ,EAAMK,MAAOC,GAAIN,EAAMM,GAAIC,QAAS,kBAAMP,EAAMQ,mBAAmBR,EAAMM,U,MCK7FG,MATf,SAAiBT,GACf,OACE,yBAAKC,UAAU,qBACb,yBAAKA,UAAU,OACZD,EAAMU,Y,MCWAC,MAff,SAAgBX,GACd,OACA,yBAAKC,UAAU,wCACb,uBAAGW,UAAU,sBAAsBC,KAAK,KAAI,6DAE5C,0BAAMZ,UAAU,mCAAmCD,EAAMc,UACzD,0BAAMb,UAAU,4BAAhB,UAAmDD,EAAMe,MAAzD,iBAA8Ef,EAAMgB,Y,MCIzEC,MAVf,WACE,OACE,yBAAKhB,UAAU,iBACf,4BAAQA,UAAU,eAClB,wBAAIA,UAAU,SAAd,gCACA,gDAAqB,0BAAMiB,KAAK,MAAMC,aAAW,SAA5B,oB,OCkEVC,G,kNAjEbC,MAAQ,CACNC,aACAR,SAAU,6EACVC,MAAO,EACPC,SAAU,EACVO,WAAY,I,EAGdf,mBAAqB,SAACF,GAEpB,IAAIiB,EAAa,EAAKF,MAAME,WAC5B,GAAIA,EAAWC,SAASlB,GACtB,EAAKmB,SAAS,CAAEX,SAAU,sCAAuCC,MAAO,EAAGQ,WAAY,SADzF,CAIEA,EAAWG,KAAKpB,GAChB,IAAIU,EAAW,EAAKK,MAAML,SACtBD,EAAQ,EAAKM,MAAMN,MAMvB,GAHIQ,EAAWC,SAASlB,IAAOU,IAAaD,GAC1C,EAAKU,SAAS,CAAET,SAAUA,EAAW,EAAGD,MAAOA,EAAQ,IAExC,KAAbC,EAGF,OAFA,EAAKS,SAAS,CAAEX,SAAU,WAAYS,WAAY,UAClDI,QAAQC,IAAI,wBAKd,IAAIC,EAAgBP,EAAWQ,MAAK,SAACC,EAAEC,GAAH,OAAOC,KAAKC,SAAS,MACzD,EAAKT,SAAS,CAAEX,SAAU,yBAA0BC,MAAOA,EAAQ,EAAGO,WAAWO,EAAeN,iB,uDAM1F,IAAD,OACP,OACE,6BAEA,kBAAC,EAAD,CACAT,SAAUqB,KAAKd,MAAMP,SACrBC,MAAOoB,KAAKd,MAAMN,MAClBC,SAAUmB,KAAKd,MAAML,WAGrB,kBAAC,EAAD,KACGmB,KAAKd,MAAMC,WAAWc,KAAI,SAAAC,GAAS,OAClC,kBAAC,EAAD,CACE7B,mBAAoB,EAAKA,mBACzBF,GAAI+B,EAAU/B,GACdgC,IAAKD,EAAU/B,GACfD,MAAOgC,EAAUhC,MACjBH,IAAKmC,EAAUlC,WAKnB,kBAAC,EAAD,W,GA5DUoC,cCIEC,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2DCZNC,IAASC,OACP,kBAAC,IAAMC,WAAP,KACE,kBAAC,EAAD,OAEFC,SAASC,eAAe,SDyHpB,kBAAmBC,WACrBA,UAAUC,cAAcC,MACrBC,MAAK,SAAAC,GACJA,EAAaC,gBAEdC,OAAM,SAAAC,GACL9B,QAAQ8B,MAAMA,EAAMC,c","file":"static/js/main.d8c1f088.chunk.js","sourcesContent":["import React from \"react\";\r\nimport \"./style.css\";\r\n\r\nfunction Cards(props) {\r\n  return (\r\n    <div className=\"card\">\r\n      <div className=\"img-container\">\r\n        <img alt={props.name} src={props.image} id={props.id} onClick={() => props.randomizeVillagers(props.id)}/>\r\n      </div>\r\n    </div>\r\n  );\r\n}\r\n\r\nexport default Cards;\r\n","import React from \"react\";\r\nimport \"./style.css\";\r\n\r\nfunction Wrapper(props) {\r\n  return(\r\n    <div className=\"container wrapper\">\r\n      <div className=\"row\">\r\n        {props.children}\r\n      </div>\r\n    </div>);\r\n}\r\n\r\nexport default Wrapper;\r\n","import React from \"react\";\r\nimport \"./style.css\";\r\n\r\nfunction NavBar(props) {\r\n  return(\r\n  <nav className=\"navbar navbar-expand-lg navbar-light\">\r\n    <a classname=\"navbar-brand col-sm\" href=\"/\"><h3>Animal Crossing Clicky Game!</h3></a>\r\n    \r\n    <span className=\"navbar-text nav-sentence col-md\">{props.sentence}</span>\r\n    <span className=\"navbar-text score col-sm\">Score: {props.score} | Top Score: {props.topScore}</span>\r\n\r\n    {/* <nav className=\"navbar navbar-light bg-light\">\r\n      <span className=\"navbar-text nav-sentence\">{props.sentence}</span>\r\n      <span className=\"navbar-text score\">Score: {props.score} | Top Score: {props.topScore}</span>\r\n    </nav> */}\r\n  </nav>);\r\n}\r\n\r\nexport default NavBar;\r\n","import React from \"react\";\r\nimport \"./style.css\";\r\n\r\nfunction Footer() {\r\n  return (\r\n    <div className=\"footer-margin\">\r\n    <footer className=\"card-footer\">\r\n    <h4 className=\"title\">Animal Crossing Clicky Game!</h4>\r\n    <p>Powered by React! <span role=\"img\" aria-label=\"react\">‚öõÔ∏è</span></p>\r\n    </footer>\r\n    </div>);\r\n}\r\n\r\nexport default Footer;\r\n","import React, { Component } from \"react\";\nimport Cards from \"./components/Cards/Cards\";\nimport Wrapper from \"./components/Wrapper/Wrapper\";\nimport NavBar from \"./components/NavBar/Navbar\";\nimport Footer from \"./components/Footer/Footer\";\nimport characters from \"./characters.json\";\nimport \"./App.css\";\n\nclass App extends Component {\n  state = {\n    characters,\n    sentence: \"Click on a villager to begin! Try not to click on the same villager twice!\",\n    score: 0,\n    topScore: 0,\n    villagerID: []\n  };\n\n  randomizeVillagers = (id) => {\n    // Uses this.state.characters for characters with equal ids and shuffles\n    let villagerID = this.state.villagerID\n    if (villagerID.includes(id)) {\n      this.setState({ sentence: \"You guessed incorrectly! Try again!\", score: 0, villagerID: [] });\n      return;\n    } else {\n      villagerID.push(id)\n      let topScore = this.state.topScore\n      let score = this.state.score\n\n      // Score and topScore calculations and score keeper -- won't let score be greater than topScore when counting up\n      if (villagerID.includes(id) && topScore === score) {\n        this.setState({ topScore: topScore + 1, score: score + 1 })\n      }\n      if (topScore === 12) {\n        this.setState({ sentence: \"You win!\", villagerID: [] });\n        console.log(\"Winner! üéä\");\n        return;\n      }\n\n      // Keeps shuffling the characters around after thye've been clicked\n      let newCharacters = characters.sort((a,b)=>Math.random()-0.5)\n      this.setState({ sentence: \"You guessed correctly!\", score: score + 1, characters:newCharacters, villagerID });\n\n    };\n  }\n\n  // Map over this.state.characters and render a Cards component for each character object\n  render() {\n    return (\n      <div>\n\n      <NavBar\n      sentence={this.state.sentence}\n      score={this.state.score}\n      topScore={this.state.topScore}\n      />\n\n      <Wrapper>\n        {this.state.characters.map(character => (\n          <Cards\n            randomizeVillagers={this.randomizeVillagers}\n            id={character.id}\n            key={character.id}\n            image={character.image}\n            alt={character.name}\n          />\n        ))}\n        </Wrapper>\n\n        <Footer />\n      </div>\n    );\n  }\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}